name: deploy

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  docs:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.0a2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}

      - name: Ensure cache is healthy
        if: steps.cached-poetry-dependencies.outputs.cache-hit == 'true'
        shell: bash
        run: poetry run python --version || rm -rf .venv

      - name: Install Python dependencies
        run: |
          poetry install --no-interaction --no-root

      - name: Print Python versions
        run: |
          source .venv/bin/activate
          which python
          which pip
          python --version
          pip --version

      - name: Build docs
        run: |
          source .venv/bin/activate
          make build

      # ------------------------------------------------------------------------
      # Release

      - name: Preview - Upload to Netlify
        if: github.event_name == 'pull_request'
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=site
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: Prod - Upload to Netlify
        if: (github.event_name != 'pull_request') && endsWith(github.ref, '/main')
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=site --prod
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
